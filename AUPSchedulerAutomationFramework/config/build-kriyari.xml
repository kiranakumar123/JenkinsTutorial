<?xml version="1.0" ?>
<project default="all" basedir="." >

	<taskdef resource="net/sf/antcontrib/antlib.xml"/>
	
	<property environment="env" />
	<echo message="ANT_HOME is set to = ${env.ANT_HOME}"/>
	<echo message="JAVA_HOME is set to = ${env.JAVA_HOME}"/>
	<echo message="TOMCAT_HOME is set to = ${env.TOMCAT_HOME}"/>
	<echo message="Building Phoenix UI Main App"/>

	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="extlib" location="../sharedlib" />
	<property name="tomcatlib" location="${env.TOMCAT_HOME}/lib" />
	<property name="deplib.cs" location="../CoreServices/dist" />
	<property name="deplib.dal" location="../DataAccessLayer/dist" />
	<property name="deplib.ad" location="../AdManager/dist" />
	<property name="deplib.ss" location="../SearchServices/dist" />
	<property name="deplib.rep" location="../ReportingServices/dist" />
	<property name="deplib.dele" location="../DeleteDaemon/dist" />
	<property name="deplib.linkr" location="../Temp" />
	<property name="deploy.dir" location="../dist" />
	<property name="web.dir" value="web" />

	<property file="build.properties"/>

	<target name="dist" depends="compile,copyjars,do-versioning,compress-all-js,compress-all-css" description="Building phoenix war">
        <mkdir dir="${dist}"/>
		<war destfile="${dist}/PhoenixApp.war" webxml="web/WEB-INF/web.xml">
			<webinf dir ="web/WEB-INF">
				<include name="web.xml" />
				<include name="Phoenix.xml" />
			</webinf>
			<lib dir="${extlib}">
				<include name="activation.jar" />
				<include name="commons-httpclient-3.1-rc1.jar" />
				<include name="htmlparser.jar" />
				<include name="lucene-1.9.01.jar" />
				<include name="commons-codec-1.3.jar" />
				<include name="commons-logging-1.1.jar" />
				<include name="ibatis-2.3.0.677.jar" />
				<include name="mail.jar" />
				<include name="commons-collections-3.1.jar" />
				<include name="htmllexer.jar" />
				<include name="log4j-1.2.14.jar" />
				<include name="mysql-connector-java-5.0.6-bin.jar" />
				<include name="spring.jar" />
				<include name="spring-webmvc.jar" />
				<include name="Tidy.jar" />
				<include name="commons-fileupload.jar" />
				<include name="commons-io.jar" />
				<include name="ehcache-1.4.0-beta.jar" />
				<include name="jsr107cache-1.0.jar" />
				<include name="backport-util-concurrent-3.0.jar" />
				<include name="commons-lang.jar"/>
				<include name="Log4jPatch.jar"/>
			</lib>
			<lib dir="${deplib.rep}">
				<include name="Reporting.jar"/>
	        	</lib>
			<lib dir="${deplib.cs}">
				<include name="CoreSvc.jar"/>
	        	</lib>
			<lib dir="${deplib.dal}">
				<include name="DataAccessLayer.jar"/>
		        </lib>
			<lib dir="${deplib.ss}">
				<include name="SearchServices.jar"/>
	        	</lib>
			<lib dir="${deplib.ad}">
				<include name="AdManager.jar"/>
	        	</lib>
			<fileset dir="web/">
				<include name="**/*.html" />
				<include name="**/*.tld" />
				<include name="**/*.css" />
				<include name="**/*.js" />
				<include name="**/*.jsp" />
				<include name="**/*.jpg" />
				<include name="**/*.gif" />
				<include name="**/*.png" />
				<exclude name="**/_svn/**" />
				<exclude name="**/.svn/**" />
				<exclude name="**/*build_layout.jsp" />
				<exclude name="**/*layout2.jsp" />
			</fileset>
			<classes dir="${build}"/>
		</war>
		<move file="${web.dir}/content/pod_home/layout2.jsp" tofile="${web.dir}/content/pod_home/layout.jsp" overwrite="true"/>

	</target>
	
	<target name="compile"  description="Compile the source code " >
		<mkdir dir="${build}"/>
		<javac srcdir="${src}" destdir="${build}" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<!--   Thirdparty Jars -->
				<fileset dir="${extlib}">
					<include name="activation.jar" />
					<include name="commons-httpclient-3.1-rc1.jar" />
					<include name="htmlparser.jar" />
					<include name="lucene-1.9.01.jar" />
					<include name="commons-codec-1.3.jar" />
					<include name="commons-logging-1.1.jar" />
					<include name="ibatis-2.3.0.677.jar" />
					<include name="mail.jar" />
					<include name="commons-collections-3.1.jar" />
					<include name="htmllexer.jar" />
					<include name="log4j-1.2.14.jar" />
					<include name="mysql-connector-java-5.0.6-bin.jar" />
					<include name="spring.jar" />
					<include name="spring-webmvc.jar" />
					<include name="Tidy.jar" />
					<include name="commons-fileupload.jar" />
					<include name="commons-io.jar" />
					<include name="ehcache-1.4.0-beta.jar" />
					<include name="jsr107cache-1.0.jar" />
					<include name="backport-util-concurrent-3.0.jar" />
					<include name="commons-lang.jar"/>
				</fileset>
				<fileset dir="${tomcatlib}">
					<include name="servlet-api.jar"/>
					<include name="jstl.jar"/>
					<include name="jsp-api.jar"/>
				</fileset>
				<!--   Product Jars -->
				<fileset dir="${deplib.cs}">
					<include name="CoreSvc.jar"/>
		        	</fileset>
				<fileset dir="${deplib.dal}">
					<include name="DataAccessLayer.jar"/>
			        </fileset>
				<fileset dir="${deplib.ss}">
					<include name="SearchServices.jar"/>
		        	</fileset>
				<fileset dir="${deplib.ad}">
					<include name="AdManager.jar"/>
		        	</fileset>
				<fileset dir="${deplib.rep}">
					<include name="Reporting.jar"/>
		        	</fileset>
				<!-- JUnit jars -->
			</classpath>
			<compilerarg value="-Xlint:deprecation"/>
			<compilerarg value="-Xlint:unchecked"/>
		</javac>
	  </target>
	
	 <target name="clean" description="clean up" >
	    <!-- Delete the ${build} and ${dist} directory trees -->
	    <delete dir="${build}"/>
	    <delete dir="${dist}"/>
	  </target>	

	<!-- Build a Jar out of CoreServies classes  -->
	<target name="all" depends="clean,compile,dist" description="Complete Build">
		<delete dir="${build}"/>
	</target>

	<target name="deploy" depends="all" description="Group the deployable components">
                <mkdir dir="${deploy.dir}/war"/>
                <copy todir="${deploy.dir}/war">
                	<fileset dir="${dist}">
                        	<include name="*.war"/>
					</fileset>
                </copy>
    </target>
	
	<target name="copyjars" description="This target copies all the dependant jar files into the WEB-INF\lib folder">
                <copy todir="web/WEB-INF/lib">
                	<fileset dir="${deplib.rep}">
                        	<include name="*.jar"/>
					</fileset>
                	<fileset dir="${deplib.cs}">
                        	<include name="*.jar"/>
					</fileset>
                	<fileset dir="${deplib.dal}">
                        	<include name="*.jar"/>
					</fileset>
                	<fileset dir="${deplib.ss}">
                        	<include name="*.jar"/>
					</fileset>
                	<fileset dir="${deplib.ad}">
                        	<include name="*.jar"/>
					</fileset>
                </copy>
	</target>
	
	<target name="do-versioning" depends="do-versioning-for-jss,do-versioning-for-csss">
		<copy file="${web.dir}/content/pod_home/layout.jsp" tofile="${web.dir}/content/pod_home/layout2.jsp" overwrite="true"/>
		<copy file="${web.dir}/content/pod_home/build_layout.jsp" tofile="${web.dir}/content/pod_home/layout.jsp" overwrite="true"/>
	</target>
	
	<target name="do-versioning-for-jss" if="do.versioning">
		<replaceregexp match='(\.js)([^"&apos;p ]*)(("){1}|(&apos;){1})' replace='.js?version=${js.version}\3' flags="g">
			<fileset dir="${web.dir}" includes="**/build_layout.jsp"/>
		</replaceregexp>
	</target>

	<target name="do-versioning-for-csss" if="do.versioning">
		<replaceregexp match='(\.css)([^"&apos; ]*)(("){1}|(&apos;){1})' replace='.css?version=${css.version}\3' flags="g">
			<fileset dir="${web.dir}" includes="**/build_layout.jsp"/>
		</replaceregexp>
	</target>

	<!--target name="do-versioning-for-images" if="do.versioning">
		<replaceregexp 
		match='((\.gif)|(\.jpeg)|(\.png)|(\.jpg))([^"&apos;\)\\ ]*)(("){1}|(\\"){1}|(&apos;){1}|(\\&apos;){1}|(\)){1})' 
		replace='\1?version=${image.version}\7' flags="g">
			<fileset dir="${build.web.dir}" includes="**/html/**,**/js/**,**/css/**,index.jsp" excludes="**/admin/**,**/home/**,**/js/compressed/**" />
		</replaceregexp>
	</target-->

	<!--target name="replace-cnames" depends="replace-images-cname">
	</target-->
	
	<!--target name="replace-images-cname" if="replace.cnames" description="Replaces images C-Name">
		<replaceregexp match='([&apos;"\(])([^"&apos;\( ]*)(images)([/|\\])' replace='\1http://${image.cname}/' flags="g">
			<fileset dir="${build.web.dir}" includes="**/*.js,**/*.css,**/*.html" excludes="**/admin/**,**/home/**,**/js/compressed/**" />
		</replaceregexp>
	</target-->
	
	<!--This target is used for concatenating the content of several files into a single one. -->
	<target name="-concat-files" description="Concats several files into one.">
		<concat destfile="${output.file}">
			<filelist refid="${filelist.id}"/>
		</concat>
	</target>

	<!--This target is used for obfuscating a single JS file. -->
	<target name="-obfuscate-js-file" description="Obfuscates JS files">
		<java jar="${file.reference.rhino.jar}"
		fork="true"
		failonerror="true"
		maxmemory="128m"
		output="${output.filename}">
			<arg line="-c ${input.filename}"/>
			<classpath>
				<pathelement location="${file.reference.rhino.jar}"/>
				<pathelement path="${java.class.path}"/>
			</classpath>
		</java>
	</target>

	<!--This target is used for removing the whitespaces from a file. -->
	<target name="-trim-whitespace" description="Trims whitespace and new line characters from a given file.">
		<replaceregexp match="\n" replace="" flags="g" file="${filename}" />
		<replaceregexp match="([\s])+" replace=" " flags="g" file="${filename}" />
	</target>

	<!--This target is used for removing the comments from a JS or CSS file. -->
	<target name="-remove-comments" description="Removes single-line and multi-line comments from JS and CSS files">
		<replaceregexp match="((//)([^\n]*)\n)|((/\*)(.*?)(\*/))" replace="" flags="gs" file="${filename}" />
	</target>

	
	<target name="compress-all-js" depends="compress-static-js,trim-whitespace-compressed-js" description="Compresses all JS files">
	</target>
	
	<target name="create-js-compressed-dir" description="Creates the compressed folder for JSs">
		<mkdir dir="${js.compress.dir}"/>
	</target>
	
	<target name="compress-static-js" if="do.compress" depends="create-js-compressed-dir" description="Compresses static JS files">
		<!-- For generating phoenix.js file -->
		<filelist 
		id="phoenix.js.fileset" 
		dir="${js.dir}"
		files="${phoenix.js.fileset}"/>
		<antcall target="-concat-files">
			<param name="filelist.id" value="phoenix.js.fileset"/>
			<param name="output.file" value="${js.compress.dir}/phoenix.js"/>
		</antcall>
		<antcall target="-obfuscate-js-file">
			<param name="input.filename" value="${js.compress.dir}/phoenix.js"/>
			<param name="output.filename" value="${js.compress.dir}/phoenix.js"/>
		</antcall>
	</target>

	<target name="trim-whitespace-compressed-js" if="do.compress" depends="compress-static-js" description="Trims extra spaces and new-line characters from compressed JS files">
		<for param="file">
			<path>
			    <fileset dir="${js.compress.dir}" includes="*.js"/>
			</path>
			<sequential>
				<antcall target="-trim-whitespace">
					<param name="filename" value="@{file}"/>
				</antcall>
			</sequential>
		</for>
	</target>
	
	<target name="create-css-compressed-dir" description="Creates the compressed folder for CSSs">
		<mkdir dir="${css.compress.dir}"/>
	</target>
	
	<target name="concat-css" depends="create-css-compressed-dir" description="Combines the CSS. Creates all possible combinations of available themes.">
		<!-- For generating phoenix.css file -->
		<filelist id="phoenix.css.fileset" dir="${css.dir}" 
		files="${phoenix.css.fileset}"/>
			
		<!-- Concat all these files -->
		<antcall target="-concat-files">
			<param name="filelist.id" value="phoenix.css.fileset"/>
			<param name="output.file" value="${css.compress.dir}/phoenix.css"/>
		</antcall>
	</target>
	
	<target name="compress-all-css" depends="concat-css" description="Concatenates the CSS. Removes comments and whitespaces.">
		<copy todir="${css.compress.dir}">
			<fileset dir="${css.pub.dir}">
				<include name="*.css"/>
			</fileset>
        </copy>
		<antcall target="css-sprite-image-transform" />
		<for param="file">
			<path>
			    <fileset dir="${css.compress.dir}" includes="*.css"/>
			</path>
			<sequential>
				<!-- Remove comments -->
				<antcall target="-remove-comments">
					<param name="filename" value="@{file}"/>
				</antcall>
				<!-- Trim white spaces -->
				<antcall target="-trim-whitespace">
					<param name="filename" value="@{file}"/>
				</antcall>
			</sequential>
		</for>
	</target>
	
	<target name="css-sprite-image-transform" description="This target transforms the CSS files and also creates the required sprite image files.">
	    <property file="${css.smartsprites.dir}/smartsprites.properties" />
	    <taskdef name="smartsprites"
	             classname="org.carrot2.labs.smartsprites.ant.SmartSpritesTask">
	      <classpath>
	        <fileset dir="${css.smartsprites.dir}/lib" />
	      </classpath>
	    </taskdef>
	    <smartsprites rootdir="${root.dir.path}"
	                  documentrootdir="${document.root.dir.path}"
	                  outputdir="${output.dir.path}"
	                  cssfilesuffix="${css.file.suffix}"
	                  csspropertyindent="${css.property.indent}"
	                  loglevel="${log.level}"
	                  spritepngdepth="${sprite.png.depth}"
	                  spritepngie6="${sprite.png.ie6}" />
	</target>
	
</project>
